#!/usr/bin/env nodejs

function print_usage() {
	console.log ('mlp-run [pipeline_document.mlp] [name of exported subpipeline] --[key1]=[val1] --[key2]=[val2] ...');
	console.log ('mlp-spec [pipeline_document.mlp] [name of exported subpipeline]');
	console.log ('Use the MLP_PATH environment variable to specify search paths for finding pipelines.');
	return;
}

var web_path=__dirname+'/../../web';
JobManager=require(web_path+'/mlpipeline/jobmanager.js').JobManager;
Job=require(web_path+'/mlpipeline/jobmanager.js').Job;
ProcessorManager=require(web_path+'/mlpipeline/managers/processormanager.js').ProcessorManager;
MLPDocument=require(web_path+'/mlpipeline/mlpdocument.js').MLPDocument;
JSQ=require(web_path+'/mlpipeline/jsq/src/jsqcore/jsq.js').JSQ;
KuleleClient=require(web_path+'/mlpipeline/kuleleclient.js').KuleleClient;

var CLP=new CLParams(process.argv);
var arg1=CLP.unnamedParameters[0]||'';
if (!arg1) {
	//arg1='/home/magland/Downloads/synth.mlp'
	print_usage();
	return;
}

if (arg1=='spec') {
	print_spec();
	return;
}

if ('_params' in CLP.namedParameters) {
	var str=require('fs').readFileSync(CLP.namedParameters['_params'],'utf-8');
	var pp=JSON.parse(str);
	for (var key in pp) {
		CLP.namedParameters[key]=pp[key];
	}
}

var mlp_path=find_mlp_file(arg1);
if (!mlp_path) {
	console.error('Not found: '+arg1);
	console.error('You may want to use the MLP_PATH environment variable.');
	return;
}

console.log ('Using pipeline: '+mlp_path);

var txt=require('fs').readFileSync(mlp_path,'utf-8');
var obj=JSON.parse(txt);

var doc=new MLPDocument();
doc.fromObject(obj);
var PLM=doc.pipelineListManager();
var input_file_manager=doc.inputFileManager();
var output_file_manager=doc.outputFileManager();

var job_manager=new JobManager();
var processor_manager=new ProcessorManager();
var kulele_client=new KuleleClient();
var larinetserver=require(__dirname+'/../../processing_server/larinet/larinetserver.js').larinetserver;

if (!larinetserver) {
	console.error('Error: larinetserver is null.');
	return;
}

kulele_client.setLarinetServer(larinetserver);
kulele_client.setProcessorManager(processor_manager);

job_manager.setProcessorManager(processor_manager);
job_manager.setDocument(doc);
job_manager.setKuleleClient(kulele_client);

//kulele_client.setSubserverName(doc.processingServerName());
/*
kulele_client.login({passcode:'testuser'},function(tmp) {
	if (!tmp.success) {
		console.error('Error logging in: '+tmp.error);
		return;
	}
*/	
	kulele_client.getProcessorSpec(function(tmp) {
		if (tmp.success) {
			processor_manager.setSpec(tmp.spec);
			step2();
		}
		else {
			console.error('Error getting processor spec: '+tmp.error)
		}
	});
//});

function print_spec() {
	
	var mlp_path=find_mlp_file(CLP.unnamedParameters[1]||'');
	if (!mlp_path) {
		console.log ('Unable to find pipeline document: '+(CLP.unnamedParameters[1]||''));
		return;
	}
	var pipeline_name=CLP.unnamedParameters[2]||'';
	if (!pipeline_name) {
		print_usage();
		return;
	}
	var txt=require('fs').readFileSync(mlp_path,'utf-8');
	var obj=JSON.parse(txt);

	var doc=new MLPDocument();
	doc.fromObject(obj);
	var PLM=doc.pipelineListManager();
	var subpipeline=PLM.findPipeline(pipeline_name);
	var spec0=subpipeline.spec();
	console.log (JSON.stringify(spec0,null,4));
}


function step2() {
	var pipeline_name=CLP.unnamedParameters[1]||'';
	var pipeline0;
	if (!pipeline_name) {
		console.error('You must specify the name of a subpipeline. Your options for this file are:');
		var num_choices=0;
		for (var a=0; a<PLM.pipelineCount(); a++) {
			var PP=PLM.pipeline(a);
			if (PP.export()) {
				var name0=PP.name();
				console.log (name0);
				num_choices++;
			}
		}
		if (num_choices===0) {
			console.log('(No subpipelines have been exported)');
		}
		return;
	}

	var subpipeline=PLM.findPipeline(pipeline_name);
	if (!subpipeline) {
		console.error('Unable to find pipeline in document named '+pipeline_name);
		return;
	}
	if (!subpipeline.export()) {
		console.error('Unable to run subpipeline because it has not been exported.');
		return;
	}

	var spec0=subpipeline.spec();
	//console.log(spec0);
	//return;

	pipeline0=new MLPipeline();
	var parameters0={};
	for (var i=0; i<spec0.parameters.length; i++) {
		var pname=spec0.parameters[i].name;
		if (pname in CLP.namedParameters) {
			parameters0[pname]=CLP.namedParameters[pname];
		}
		else {
			if (!spec0.parameters[i].optional) {
				console.error('Missing required parameter: '+pname);
				return;
			}
		}
	}
	var outputs0={}
	for (var i=0; i<spec0.outputs.length; i++) {
		var oname=spec0.outputs[i].name;
		if (oname in CLP.namedParameters) {
			outputs0[oname]=oname;
		}
		else {
			if (!spec0.outputs[i].optional) {
				console.error('Missing required output: '+oname);
				return;
			}
		}
	}
	var inputs0={}
	for (var i=0; i<spec0.inputs.length; i++) {
		var iname=spec0.inputs[i].name;
		if (iname in CLP.namedParameters) {
			inputs0[iname]=iname;
		}
		else {
			if (!spec0.inputs[i].optional) {
				console.error('Missing required input: '+iname);
				return;
			}
		}
	}
	for (var iname in inputs0) {
		var path0=CLP.namedParameters[iname];
		console.log ('Computing checksum for file: '+path0);
		var stat=prv_stat_sync(path0);
		if (!stat) {
			console.error('Error computing checksum for file: '+path0);
			return;
		}
		var prv={
			original_path:require('path').resolve(process.cwd(),path0),
			original_checksum:stat.checksum,
			original_fcs:stat.fcs,
			original_size:stat.size
		}
		input_file_manager.setPrv(iname,prv);
	}
	var step0={
		step_type: "pipeline",
  		pipeline_name: pipeline_name,
  		inputs: inputs0,
  		outputs: outputs0,
  		parameters: parameters0
	};
	pipeline0.setObject({
		spec:{name:'_main'},steps:[step0]
	});
	doc.pipelineListManager().addPipeline(pipeline0);
	for (var i=0; i<pipeline0.stepCount(); i++) {
		var step0=pipeline0.step(i);
		job_manager.startTopLevelJob(step0,pipeline0.name(),function(tmp) {
			if (!tmp.success) {
				console.error('Error: '+tmp.error);
				return;
			}
			var job=job_manager.findLastJobForStep(pipeline0.name(),step0);
			if (!job) {
				console.error('Unexpected: unable to find job for step.');
				return;
			}
			var output_files=job.outputFiles();
			for (var okey in output_files) {
				if (okey in CLP.namedParameters) {
					var prv=output_files[okey].prv;
					if (!copy_is_needed(prv.original_path,CLP.namedParameters[okey])) {
						console.log ('No change in output file: '+CLP.namedParameters[okey]);
					}
					else {
						console.log ('Copying output '+okey+' to '+CLP.namedParameters[okey]);
						copy_file_sync(prv.original_path,CLP.namedParameters[okey]);
					}
				}
			}
		}); 
	}
}

function copy_is_needed(src,dst) {
	if (!require('fs').existsSync(dst))
		return true;
	var stat_src=require('fs').statSync(src);
	var stat_dst=require('fs').statSync(dst);
	if (stat_src.size!=stat_dst.size)
		return true;
	var prv_stat_src=prv_stat_sync(src);
	var prv_stat_dst=prv_stat_sync(dst);
	if (prv_stat_src.checksum==prv_stat_dst.checksum)
		return false;
	return true;
}

function find_mlp_file(fname) {
	if (require('fs').existsSync(fname)) {
		return fname;
	}
	if (fname.slice(0,1)=='/') return '';
	var str=process.env.MLP_PATH;
	if (!str) return '';
	var list=str.split(':');
	for (var i in list) {
		var path0=list[i];
		if (require('fs').existsSync(path0+'/'+fname)) {
			return path0+'/'+fname;
		}
	}
	return fname;
}

function foreach_async(list,func,callback) {
  var index=0;
  do_next();
  function do_next() {
    if (index>=list.length) {
      callback(null);
      return;
    }
    func(list[index],function() {
      index++;
      do_next();
    });
  }
}

function copy_file_sync(src,dst) {
	require('child_process').execSync('cp '+src+' '+dst);
}

function prv_stat_sync(path) {
	var r = require('child_process').execSync('prv-stat '+path);
	var str=r.toString();
	var obj=try_parse_json(str.trim());
	if (!obj) {
		console.error('Error parsing json in output of prv-stat');
		return null;
	}
	return obj;
}

function try_parse_json(str) {
	try {
		return JSON.parse(str);
	}
	catch(err) {
		return null;
	}
}

function CLParams(argv) {
	this.unnamedParameters=[];
	this.namedParameters={};

	var args=argv.slice(2);
	for (var i=0; i<args.length; i++) {
		var arg0=args[i];
		if (arg0.indexOf('--')===0) {
			arg0=arg0.slice(2);
			var ind=arg0.indexOf('=');
			if (ind>=0) {
				this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
			}
			else {
				//this.namedParameters[arg0]=args[i+1]||'';
				//i++;
				this.namedParameters[arg0]='';
			}
		}
		else if (arg0.indexOf('-')===0) {
			arg0=arg0.slice(1);
			this.namedParameters[arg0]='';
		}
		else {
			this.unnamedParameters.push(arg0);
		}
	}
};

