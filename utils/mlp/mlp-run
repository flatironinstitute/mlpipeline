#!/usr/bin/env nodejs

function print_usage() {
	console.log ('mlp [pipeline_document.mlp] --pipeline=[name of internal pipeline]');
	return;
}

var web_path=__dirname+'/../../web';
JobManager=require(web_path+'/mlpipeline/jobmanager.js').JobManager;
Job=require(web_path+'/mlpipeline/jobmanager.js').Job;
ProcessorManager=require(web_path+'/mlpipeline/managers/processormanager.js').ProcessorManager;
MLPDocument=require(web_path+'/mlpipeline/mlpdocument.js').MLPDocument;
JSQ=require(web_path+'/mlpipeline/jsq/src/jsqcore/jsq.js').JSQ;
KuleleClient=require(web_path+'/mlpipeline/kuleleclient.js').KuleleClient;

var CLP=new CLParams(process.argv);
var arg1=CLP.unnamedParameters[0]||'';
if (!arg1) {
	//arg1='/home/magland/Downloads/synth.mlp'
	print_usage();
	return;
}

var txt=require('fs').readFileSync(arg1,'utf-8');
var obj=JSON.parse(txt);

var doc=new MLPDocument();
doc.fromObject(obj);
var PLM=doc.pipelineListManager();
var input_file_manager=doc.inputFileManager();
var output_file_manager=doc.outputFileManager();

var job_manager=new JobManager();
var processor_manager=new ProcessorManager();
var kulele_client=new KuleleClient();
var larinetserver=require(__dirname+'/../../processing_server/larinet/larinetserver.js').larinetserver;
kulele_client.setLarinetServer(larinetserver);
kulele_client.setProcessorManager(processor_manager);

job_manager.setProcessorManager(processor_manager);
job_manager.setDocument(doc);
job_manager.setKuleleClient(kulele_client);

//kulele_client.setSubserverName(doc.processingServerName());
/*
kulele_client.login({passcode:'testuser'},function(tmp) {
	if (!tmp.success) {
		console.err('Error logging in: '+tmp.error);
		return;
	}
*/	
	kulele_client.getProcessorSpec(function(tmp) {
		if (tmp.success) {
			processor_manager.setSpec(tmp.spec);
			step2();
		}
		else {
			console.error('Error getting processor spec: '+tmp.error)
		}
	});
//});


function step2() {
	var pipeline_name=CLP.unnamedParameters[1]||'';
	var pipeline0;
	if (pipeline_name) {
		var subpipeline=PLM.findPipeline(pipeline_name);
		if (!subpipeline) {
			console.err('Unable to find main pipeline in document named '+pipeline_name);
			return;
		}

		var spec0=subpipeline.spec();
		//console.log(spec0);
		//return;

		pipeline0=new MLPipeline();
		var parameters0={};
		for (var i=0; i<spec0.parameters.length; i++) {
			var pname=spec0.parameters[i].name;
			if (pname in CLP.namedParameters) {
				parameters0[pname]=CLP.namedParameters[pname];
			}
			else {
				if (!spec0.parameters[i].optional) {
					console.error('Missing required parameter: '+pname);
					return;
				}
			}
		}
		var outputs0={}
		for (var i=0; i<spec0.outputs.length; i++) {
			var oname=spec0.outputs[i].name;
			if (oname in CLP.namedParameters) {
				outputs0[oname]=oname;
			}
			else {
				if (!spec0.outputs[i].optional) {
					console.error('Missing required output: '+oname);
					return;
				}
			}
		}
		var inputs0={}
		for (var i=0; i<spec0.inputs.length; i++) {
			var iname=spec0.inputs[i].name;
			if (iname in CLP.namedParameters) {
				inputs0[iname]=iname;
			}
			else {
				if (!spec0.inputs[i].optional) {
					console.error('Missing required input: '+iname);
					return;
				}
			}
		}
		for (var iname in inputs0) {
			var path0=CLP.namedParameters[iname];
			console.log ('Computing checksum for file: '+path0);
			var stat=prv_stat_sync(path0);
			if (!stat) {
				console.error('Error computing checksum for file: '+path0);
				return;
			}
			var prv={
				original_path:require('path').resolve(process.cwd(),path0),
				original_checksum:stat.checksum,
				original_fcs:stat.fcs,
				original_size:stat.size
			}
			input_file_manager.setPrv(iname,prv);
		}
		var step0={
			step_type: "pipeline",
      		pipeline_name: pipeline_name,
      		inputs: inputs0,
      		outputs: outputs0,
      		parameters: parameters0
		};
		pipeline0.setObject({
			spec:{name:'main2'},steps:[step0]
		});
		doc.pipelineListManager().addPipeline(pipeline0);
	}
	else {
		pipeline0=PLM.findPipeline('main');
		if (!pipeline0) {
			console.err('Unable to find main pipeline in document.');
			return;
		}
	}
	for (var i=0; i<pipeline0.stepCount(); i++) {
		var step0=pipeline0.step(i);
		job_manager.startTopLevelJob(step0,'main2',function(tmp) {
			if (!tmp.success) {
				console.error('Error: '+tmp.error);
				return;
			}
			var job=job_manager.findLastJobForStep(pipeline0.name(),step0);
			if (!job) {
				console.error('Unexpected: unable to find job for step.');
				return;
			}
			var output_files=job.outputFiles();
			for (var okey in output_files) {
				if (okey in CLP.namedParameters) {
					var prv=output_files[okey].prv;
					console.log('Copying output '+okey+' to '+CLP.namedParameters[okey]);
					copy_file_sync(prv.original_path,CLP.namedParameters[okey]);
				}
			}
		}); 
	}

	/*
	function start_job(step,parent_pipeline_name) {
		var job=new Job();

		JSQ.connect(job,'status_changed',new JSQObject(),function() {
			var name0=step.processor_name||step.pipeline_name;
			console.log ('=== '+name0+': '+job.status()+' : '+job.error());
		});

		job.setJobManager(job_manager);
		job.setStep(step);
		job.setParentPipelineName(parent_pipeline_name);
		job._setStatus('pending');
		var spec=job.getSpec();
		if (!spec) {
			console.err('Unable to get spec for job.');
			return;
		}
		wait_for_ready_to_run_and_set_up_job(job,function(tmp) {
			if (!tmp.success) {
				console.err('Error setting up job: '+tmp.error);
				return;
			}
			job.start(job_manager);
		});
	}

	function wait_for_ready_to_run_and_set_up_job(job,callback) {
		var spec=job.getSpec();
		var step=job.step();
		var input_files={};
		for (var i in spec.inputs) {
			var input0=spec.inputs[i];
			if (step.inputs[input0.name]) {
				var prvrec=input_file_manager.prvRecord(step.inputs[input0.name]);
				if (!prvrec) {
					prvrec=find_input_file(job.parentPipelineName(),step.inputs[input0.name]);
				}
				if (prvrec) {
					input_files[input0.name]=prvrec;
				}
				else {
					if (input_file_is_pending(job.parentPipelineName(),step.inputs[input0.name])) {
						setTimeout(function() {
							wait_for_ready_to_run_and_set_up_job(job,callback)
						},100);
						return;
					}
					else {
						job._setStatus('error');
						job._setError('Unable to find required input: '+step.inputs[input0.name]);
						return;
					}
				}
			}
		}
		var parameters={};
		for (var i in spec.parameters) {
			var param0=spec.parameters[i];
			if (param0.name in step.parameters) {
				parameters[param0.name]=step.parameters[param0.name];
			}
			else {
				if (!param0.optional) {
					job._setStatus('error');
					job._setError('Unable to find required parameter: '+param0.name);
					return;	
				}
			}
		}
		job._setInputFiles(input_files);
		job._setParameters(parameters);
		callback({success:true});
	}
	function find_input_file(pipeline_name,file_name) {
		var pipeline0=doc.pipelineListManager().findPipeline(pipeline_name);
		if (!pipeline0) return null;
		for (var i=0; i<pipeline0.stepCount(); i++) {
			var step0=pipeline0.step(i);
			for (var oname in step0.outputs) {
				if (step0.outputs[oname]==file_name) {
					var job=job_manager.findLastJobForStep(pipeline_name,step0);
					if (!job) return null;
					if (job.status()=='finished') {
						return job.outputFiles()[oname];
					}
				}
			}
		}
		return null;
	}
	function input_file_is_pending(pipeline_name,file_name) {
		var pipeline0=doc.pipelineListManager().findPipeline(pipeline_name);
		if (!pipeline0) return false;
		for (var i=0; i<pipeline0.stepCount(); i++) {
			var step0=pipeline0.step(i);
			for (var oname in step0.outputs) {
				if (step0.outputs[oname]==file_name) {
					var job=job_manager.findLastJobForStep(pipeline_name,step0);
					if ((job.status()=='finished')||(job.status()=='running')||(job.status()=='pending')) {
						return true;
					}
				}
			}
		}
		return false;
	}
	*/
}

function foreach_async(list,func,callback) {
  var index=0;
  do_next();
  function do_next() {
    if (index>=list.length) {
      callback(null);
      return;
    }
    func(list[index],function() {
      index++;
      do_next();
    });
  }
}

function copy_file_sync(src,dst) {
	require('child_process').execSync('cp '+src+' '+dst);
}

function prv_stat_sync(path) {
	var r = require('child_process').execSync('prv-stat '+path);
	var str=r.toString();
	console.log(str);
	var obj=try_parse_json(str.trim());
	if (!obj) {
		console.error('Error parsing json in output of prv-stat');
		return null;
	}
	return obj;
}

function try_parse_json(str) {
	try {
		return JSON.parse(str);
	}
	catch(err) {
		return null;
	}
}

function CLParams(argv) {
	this.unnamedParameters=[];
	this.namedParameters={};

	var args=argv.slice(2);
	for (var i=0; i<args.length; i++) {
		var arg0=args[i];
		if (arg0.indexOf('--')===0) {
			arg0=arg0.slice(2);
			var ind=arg0.indexOf('=');
			if (ind>=0) {
				this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
			}
			else {
				//this.namedParameters[arg0]=args[i+1]||'';
				//i++;
				this.namedParameters[arg0]='';
			}
		}
		else if (arg0.indexOf('-')===0) {
			arg0=arg0.slice(1);
			this.namedParameters[arg0]='';
		}
		else {
			this.unnamedParameters.push(arg0);
		}
	}
};